{"version":3,"sources":["Qa.js","serviceWorker.js","index.js"],"names":["Question","text","answer","isOpen","onClick","class","Qa","props","questions","JSON","parse","state","openIds","handleClick","bind","id","this","includes","filter","e","setState","className","map","q","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mSA2BQA,G,MAAW,SAAC,GAAD,IAAEC,EAAF,EAAEA,KAAMC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,OAAQC,EAAxB,EAAwBA,QAAxB,OACX,2BAAOA,QAASA,GACd,yBAAKC,MAAM,aACT,4BAAKJ,GACJE,GAAU,2BAAID,OA6CZI,E,YAvCT,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KACDC,UAAYC,KAAKC,MApCZ,i7EAsCV,EAAKC,MAAQ,CACXC,QAAS,IAEX,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBAPL,E,yEASNC,GAAG,IAERH,EAAWI,KAAKL,MAAhBC,QACLA,EAAUA,EAAQK,SAASF,GAAMH,EAAQM,QAAO,SAAAC,GAAC,OAAIA,IAAMJ,KAAjD,sBAA2DH,GAA3D,CAAoEG,IAC9EC,KAAKI,SAAS,CAAER,c,+BAET,IAAD,OACJ,OACE,yBAAKP,MAAM,aACT,yBAAKgB,UAAU,eACX,yBAAKhB,MAAM,WACT,qHAEF,yBAAKA,MAAM,UACNW,KAAKR,UAAUc,KAAI,SAAAC,GAAC,OACjB,kBAAC,EAAD,CACIC,IAAKD,EAAER,GACPd,KAAMsB,EAAEtB,KACRC,OAAQqB,EAAErB,OACVE,QAAS,WAAQ,EAAKS,YAAYU,EAAER,KACpCZ,OAAQ,EAAKQ,MAAMC,QAAQK,SAASM,EAAER,gB,GA9BjDU,IAAMC,WCxBLC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,OD0H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.19772823.chunk.js","sourcesContent":["import React from 'react';\nimport './Qa.scss';\n\nconst QUESTIONS_JSON = `[\n    {\n      \"id\": 1,\n      \"text\": \"注文してからどのくらいで届きますか？\",\n      \"answer\": \"15時までのご注文で当日配送いたしますので、最短で翌日にお届けとなります。また、発送が完了しだい追跡番号をお知らせいたしますので、発送後の配達状況をお調べいただくことができます。\"\n    },\n    {\n      \"id\": 2,\n      \"text\": \"配送業者を指定できますか？\",\n      \"answer\": \"しろねこメイル便でのお届けとなります。他の配送業者様や配送方法をご指定いただくことはできません。\"\n    },\n    {\n      \"id\": 3,\n      \"text\": \"送料はかかりますか？\",\n      \"answer\": \"このページからのご注文に限り、送料無料でお届けいたします！キャンペーンコードの入力が必要となりますので、入力漏れがないかお確かめください。\"\n    },\n    {\n      \"id\": 4,\n      \"text\": \"返品は可能ですか？\",\n      \"answer\": \"大変申し訳ございませんが、返品は承っておりません。ただし、発送の際に商品チェックを実施しておりますが、万が一ご注文いただいた商品と異なっていたり、破損や不具合などが見つかりました場合は、返品・交換対応をさせていただきます。\"\n    }\n  ]`;\n\n//   一つの質問とその回答を表示するdivを子コンポネントにする\n  const Question = ({text, answer, isOpen, onClick}) => (\n        <label onClick={onClick}>\n          <div class=\"questions\">\n            <h6>{text}</h6>\n            {isOpen && <p>{answer}</p>}\n          </div>\n        </label>\n  )\n\n  class Qa extends React.Component {\n      constructor(props){\n          super(props);\n          this.questions = JSON.parse(QUESTIONS_JSON);\n        //   回答が表示されている質問のidを配列でもてるようにする\n          this.state = {\n            openIds: []\n          }\n          this.handleClick = this.handleClick.bind(this);\n      }\n      handleClick(id){\n        // 分割代入\n        let {openIds} = this.state;\n        openIds = openIds.includes(id) ? openIds.filter(e => e !== id) : [...openIds, id];\n        this.setState({ openIds });\n      }\n      render(){\n          return(\n            <div class=\"q-wrapper\">\n              <div className=\"q-container\">\n                  <div class=\"q-title\">\n                    <h3>ご注文に際してよくあるご質問</h3> \n                  </div>\n                  <div class=\"answer\">  \n                      {this.questions.map(q => (\n                          <Question\n                              key={q.id}\n                              text={q.text}\n                              answer={q.answer}\n                              onClick={() => { this.handleClick(q.id); }}\n                              isOpen={this.state.openIds.includes(q.id)}\n                          />\n                      ))}\n                  </div>\n              </div>\n            </div>\n          );\n      }\n  }\n\nexport default Qa;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\n// import App from './App';\nimport Qa from './Qa';\nimport * as serviceWorker from './serviceWorker';\n\n// ReactDOM.render(<App />, document.getElementById('root'));\nReactDOM.render(<Qa />, document.getElementById('qa'));\n// ReactDOM.render(<PromoCode />, document.getElementById('promocode'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}